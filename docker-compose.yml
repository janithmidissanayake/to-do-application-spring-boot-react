services:
  db:
    image: mysql:8.0
    container_name: todo-db
    environment:
      MYSQL_ROOT_PASSWORD: "password123#"
      MYSQL_DATABASE: todo
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword123#"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - todo-network

  backend:
    build:
      context: ./todo-application-backend
      dockerfile: Dockerfile
      target: final-runner
    container_name: todo-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/todo
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "password123#"
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - todo-network
    restart: on-failure

  backend-test:
    build:
      context: ./todo-application-backend
      dockerfile: Dockerfile
      # IMPORTANT: Target the builder stage which has Maven and the test source code
      target: maven-builder
    container_name: todo-backend-test-runner
    command: mvn clean test
    environment:
      # Use the same database configuration for integration tests if needed
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/todo
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "password123#"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - todo-network
    restart: "no" # Ensures the container stops after running tests

  frontend:
    build:
      context: ./todo-application-frontend
      dockerfile: Dockerfile
      target: production
    container_name: todo-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - todo-network
    restart: on-failure

  frontend-unit-test:
    build:
      context: ./todo-application-frontend
      dockerfile: Dockerfile
      target: app-builder
    container_name: todo-frontend-unit-test-runner
    # Executes the 'test:coverage' script from package.json
    command: npm run test:coverage
    networks:
      - todo-network
    restart: "no" # Ensures the container stops after running tests


  frontend-e2e-test:
    build:
      context: ./todo-application-frontend
      dockerfile: Dockerfile
      # Target the e2e-test-runner stage which uses Debian (Playwright compatible)
      target: e2e-test-runner
      args:
        - VITE_API_URL=http://backend:8080
    container_name: todo-frontend-e2e-test-runner
    # Playwright requires the entire application to be running
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
    # Serve the built frontend and run E2E tests
    command: sh -c "npx --yes serve -s dist -l 5173 & until curl -s http://localhost:5173 > /dev/null; do echo 'Waiting for frontend server...'; sleep 1; done && echo 'Frontend ready!' && npm run e2e"
    environment:
      # Test against the locally served frontend (with correct API URL)
      PLAYWRIGHT_BASE_URL: http://localhost:5173/
      VITE_API_URL: http://backend:8080
    networks:
      - todo-network
    restart: "no" # Ensures the container stops after running E2E tests

  # Fast E2E tests (Chromium only) - Use this for quicker feedback during development
  frontend-e2e-test-fast:
    build:
      context: ./todo-application-frontend
      dockerfile: Dockerfile
      target: e2e-test-runner
      args:
        - VITE_API_URL=http://backend:8080
    container_name: todo-frontend-e2e-test-fast
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
    command: sh -c "npx --yes serve -s dist -l 5173 & until curl -s http://localhost:5173 > /dev/null; do echo 'Waiting for frontend server...'; sleep 1; done && echo 'Frontend ready!' && npm run e2e"
    environment:
      PLAYWRIGHT_BASE_URL: http://localhost:5173/
      VITE_API_URL: http://backend:8080
      PLAYWRIGHT_FAST: "true"  # Run only Chromium tests
    networks:
      - todo-network
    restart: "no"


volumes:
  db_data:

networks:
  todo-network:
    driver: bridge
